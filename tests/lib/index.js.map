{"version":3,"sources":["../src/index.js"],"names":[],"mappings":";;;;;wBAGoC,UAAU;;mBAC+C,YAAY;;AAEzG,IAAI,CAAC,4BAA4B,EAAE,YAAM;AACrC,QAAI,CAAC,GAAG,EAAE,CAAC;AACX,QAAI,GAAG,GAAG,yBAAe,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC;AACpC,+BAAY,GAAG,EAAE,CAAC,CAAC,CAAC;AACpB,+BAAY,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;CACzB,CAAC,CAAC;;AAEH,IAAI,CAAC,4BAA4B,EAAE,YAAM;AACrC,QAAI,CAAC,GAAG,EAAE,CAAC;AACX,QAAI,GAAG,GAAG,yBAAe,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC;AACpC,+BAAY,GAAG,EAAE,CAAC,CAAC,CAAC;AACpB,+BAAY,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;;AAEtB,0BAAO;eAAM,yBAAe,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC;KAAA,EAAE,6BAA6B,CAAC,CAAC;CAC1E,CAAC,CAAC;;AAEH,IAAI,CAAC,0BAA0B,EAAE,YAAM;AACnC,QAAI,CAAC,GAAG,EAAE,CAAC;AACX,QAAI,GAAG,GAAG,uBAAa,CAAC,EAAE,GAAG,EAAE;eAAM,CAAC;KAAA,CAAC,CAAC;AACxC,+BAAY,GAAG,EAAE,CAAC,CAAC,CAAC;AACpB,+BAAY,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;CACzB,CAAC,CAAC;;AAEH,IAAI,CAAC,0BAA0B,EAAE,YAAM;AACnC,QAAI,CAAC,GAAG,EAAE,CAAC;AACX,QAAI,KAAK,CAAC;AACV,QAAI,GAAG,GAAG,uBAAa,CAAC,EAAE,GAAG,EAAE,UAAC,CAAC;eAAK,KAAK,GAAG,CAAC,GAAG,CAAC;KAAA,CAAC,CAAC;AACrD,+BAAY,GAAG,EAAE,CAAC,CAAC,CAAC;AACpB,OAAG,CAAC,CAAC,GAAG,CAAC,CAAC;AACV,+BAAY,KAAK,EAAE,CAAC,CAAC,CAAC;CACzB,CAAC,CAAC;;AAEH,IAAI,CAAC,8BAA8B,EAAE,YAAM;AACvC,QAAI,CAAC,GAAG,EAAE,CAAC;AACX,QAAI,GAAG,GAAG,2BAAiB,CAAC,EAAE;AAC1B,SAAC,EAAE,CAAC;AACJ,SAAC,EAAE,CAAC;KACP,CAAC,CAAC;AACH,+BAAY,GAAG,EAAE,CAAC,CAAC,CAAC;AACpB,+BAAY,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AACtB,+BAAY,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;CACzB,CAAC,CAAC;;AAEH,IAAI,CAAC,wDAAwD,EAAE,YAAM;AACjE,QAAI,CAAC,GAAG,EAAE,CAAC;AACX,QAAI,GAAG,GAAG,2BAAiB,CAAC,CAAC,CAAC;AAC9B,+BAAY,GAAG,EAAE,CAAC,CAAC,CAAC;CACvB,CAAC,CAAC","file":"index.js","sourcesContent":["/* jshint maxlen: 200 */\n/* global test */\n\nimport { strictEqual, throws } from 'proclaim';\nimport { defineProperty, defineConstant, defineGetter, defineSetter, defineProperties } from '../../lib/';\n\ntest('defineProperty should work', () => {\n    let o = {};\n    let res = defineProperty(o, 'a', 1);\n    strictEqual(res, o);\n    strictEqual(res.a, 1);\n});\n\ntest('defineConstant should work', () => {\n    let o = {};\n    let res = defineConstant(o, 'a', 1);\n    strictEqual(res, o);\n    strictEqual(res.a, 1);\n\n    throws(() => defineConstant(o, 'a', 2), 'Cannot redefine property: a');\n});\n\ntest('defineGetter should work', () => {\n    let o = {};\n    let res = defineGetter(o, 'a', () => 1);\n    strictEqual(res, o);\n    strictEqual(res.a, 1);\n});\n\ntest('defineSetter should work', () => {\n    let o = {};\n    let value;\n    let res = defineSetter(o, 'a', (v) => value = v * 2);\n    strictEqual(res, o);\n    res.a = 2;\n    strictEqual(value, 4);\n});\n\ntest('defineProperties should work', () => {\n    let o = {};\n    let res = defineProperties(o, {\n        a: 1,\n        b: 2,\n    });\n    strictEqual(res, o);\n    strictEqual(res.a, 1);\n    strictEqual(res.b, 2);\n});\n\ntest('defineProperties should work when properties are empty', () => {\n    let o = {};\n    let res = defineProperties(o);\n    strictEqual(res, o);\n});\n"]}